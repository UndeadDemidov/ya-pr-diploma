// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/UndeadDemidov/ya-pr-diploma/internal/app (interfaces: Authenticator,OrderProcessor)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	order "github.com/UndeadDemidov/ya-pr-diploma/internal/domains/order"
	user "github.com/UndeadDemidov/ya-pr-diploma/internal/domains/user"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthenticator) Login(arg0 context.Context, arg1, arg2 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthenticatorMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthenticator)(nil).Login), arg0, arg1, arg2)
}

// SignIn mocks base method.
func (m *MockAuthenticator) SignIn(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthenticatorMockRecorder) SignIn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthenticator)(nil).SignIn), arg0, arg1, arg2)
}

// MockOrderProcessor is a mock of OrderProcessor interface.
type MockOrderProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProcessorMockRecorder
}

// MockOrderProcessorMockRecorder is the mock recorder for MockOrderProcessor.
type MockOrderProcessorMockRecorder struct {
	mock *MockOrderProcessor
}

// NewMockOrderProcessor creates a new mock instance.
func NewMockOrderProcessor(ctrl *gomock.Controller) *MockOrderProcessor {
	mock := &MockOrderProcessor{ctrl: ctrl}
	mock.recorder = &MockOrderProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProcessor) EXPECT() *MockOrderProcessorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOrderProcessor) Add(arg0 context.Context, arg1 user.User, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockOrderProcessorMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrderProcessor)(nil).Add), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockOrderProcessor) List(arg0 context.Context, arg1 user.User) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOrderProcessorMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrderProcessor)(nil).List), arg0, arg1)
}
