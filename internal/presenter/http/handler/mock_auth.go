// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/UndeadDemidov/ya-pr-diploma/internal/presenter/http/handler (interfaces: CredentialManager,CredentialValidator)

// Package mock_handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCredentialManager is a mock of CredentialManager interface.
type MockCredentialManager struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialManagerMockRecorder
}

// MockCredentialManagerMockRecorder is the mock recorder for MockCredentialManager.
type MockCredentialManagerMockRecorder struct {
	mock *MockCredentialManager
}

// NewMockCredentialManager creates a new mock instance.
func NewMockCredentialManager(ctrl *gomock.Controller) *MockCredentialManager {
	mock := &MockCredentialManager{ctrl: ctrl}
	mock.recorder = &MockCredentialManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialManager) EXPECT() *MockCredentialManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCredentialManager) Add(arg0 CredentialValidator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCredentialManagerMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCredentialManager)(nil).Add), arg0)
}

// Get mocks base method.
func (m *MockCredentialManager) Get(arg0 string) (CredentialValidator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(CredentialValidator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCredentialManagerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCredentialManager)(nil).Get), arg0)
}

// New mocks base method.
func (m *MockCredentialManager) New(arg0, arg1 string) (CredentialValidator, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(CredentialValidator)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockCredentialManagerMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockCredentialManager)(nil).New), arg0, arg1)
}

// MockCredentialValidator is a mock of CredentialValidator interface.
type MockCredentialValidator struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialValidatorMockRecorder
}

// MockCredentialValidatorMockRecorder is the mock recorder for MockCredentialValidator.
type MockCredentialValidatorMockRecorder struct {
	mock *MockCredentialValidator
}

// NewMockCredentialValidator creates a new mock instance.
func NewMockCredentialValidator(ctrl *gomock.Controller) *MockCredentialValidator {
	mock := &MockCredentialValidator{ctrl: ctrl}
	mock.recorder = &MockCredentialValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialValidator) EXPECT() *MockCredentialValidatorMockRecorder {
	return m.recorder
}

// IsValid mocks base method.
func (m *MockCredentialValidator) IsValid() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IsValid")
}

// IsValid indicates an expected call of IsValid.
func (mr *MockCredentialValidatorMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockCredentialValidator)(nil).IsValid))
}
